const assert = require('assert');

const fetch = require('node-fetch');

const myModule = require('../../dist/cjs');

const utils = require('./utils');

const unitTestEqual = utils.unitTestEqual;
const assert1dCloseTo = utils.assert1dCloseTo;
const assert2dCloseTo = utils.assert2dCloseTo;

const name = 'EBM model';

console.log(`\n--- Start testing ${name} ---`);

const testEBM = async () => {
  const sampleUR = 'https://gist.githubusercontent.com/xiaohk/bd5cec77de8a2d6c806226fbdf916a1b/raw/e9d34209eb6ad86a140bfd786d2ec876b15369d9/iow-house-sample.json';
  const featureURL = 'https://gist.githubusercontent.com/xiaohk/e47a3752ed2aa6fd3ab2f16e23858d5d/raw/72544975ca0c798f3156976dafad56fdc67288ae/iow-house-ebm.json';

  let result = await fetch(sampleUR);
  let sampleData = await result.json();

  result = await fetch(featureURL);
  let featureData = await result.json();

  console.time('init ebm');
  let ebm = new myModule.EBM(featureData, sampleData, 'LotFrontage', false);
  console.timeEnd('init ebm');

  let expectedPred = [
    209781.44, 90352.68, 152809.13, 176288.15, 194828.51, 321204.81, 96731.61, 218825.47, 100035.09, 87802.01, 310555.55, 222935.09, 262606.07, 120491.59, 122574.34, 166457.23, 280486.37, 211382.64, 198443.2, 248678.21, 235439.34, 175037.03, 218264.84, 201902.8, 121528.56, 107188.02, 233934.78, 264476.83, 284575.6, 175548.16, 200310.65, 100153.22, 190424.53, 98327.71, 199287.42, 131409.69, 136908.15, 204755.53, 315486.72, 415359.83, 188364.28, 213718.63, 102434.85, 205968.91, 64565.03, 213782.81, 132558.41, 137649.68, 130718.71, 121938.02, 249030.82, 349675.5, 102969.76, 181948.64, 281392.76, 125600.45, 375413.6, 165286.14, 99373.71, 153067.09, 149887.59, 171593.18, 145048.71, 146572.72, 149087.09, 133160.07, 84806.71, 226233.52, 358243.1, 95699.42, 130735.52, 156275.57, 146818.76, 219778.59, 186270.2, 147031.16, 236128.7, 171915.49, 203418.88, 160970.07, 105402.2, 149728.14, 168756.74, 207696.8, 314838.66, 338868.34, 149643.12, 204474.67, 162103.13, 129426.17, 120764.18, 202478.48, 146059.63, 228797.72, 232941.89, 89807.43, 192169.19, 217210.86, 111480.13, 258372.63, 151768.15, 126071.01, 109805.67, 106576.97, 159592.28, 133527.43, 356461.18, 268935.45, 133885.29, 203459.46, 248910.58, 191068.39, 483706.25, 257242.11, 281267.25, 127810.13, 265317.62, 188759.76, 125447.93, 196251.57, 149919.46, 146989.94, 109824.74, 189801.06, 131723.56, 158329.55, 132273.04, 200476.4, 145809.45, 283028.71, 204471.2, 109515.98, 118560.32, 146247.65, 141863.07, 114928.76, 146807.49, 199998.8, 258177.63, 160205.95, 222353.32, 119910.29, 250582.06, 168020.97, 305976.14, 160266.17, 140910.48, 104022.36, 74068.69, 113009.14, 217566.39, 116899.89, 283668.44, 216685.61, 117261.92, 129954.16, 154810.18, 157826.98, 141449.39, 126850.97, 295425.98, 234589.46, 121664.68, 167895.84, 230300.22, 335726.88, 51872.81, 205311.72, 129792.43, 110301.73, 134191.25, 197785.73, 140106.79, 252101.43, 167525.02, 70057.4, 117097.84, 221623.96, 150748.91, 131638.75, 226331.52, 187556.53, 175518.3, 257017.21, 78720.27, 203554.36, 87570.35, 112112.98, 237136.22, 124733.51, 116333.92, 378030.94, 172349.67, 93684.83, 141905.46, 115644.42, 234732.27, 217156.69, 118119.25, 99646.6, 289972.03, 219685.68, 95290.86, 84921.75, 167480.72, 148651.15, 174884.23, 151439.3, 162118.15, 92497.89, 141850.59, 293552.5, 288119.46, 126698.58, 116829.31, 218069.32, 90982.65, 228146.24, 115243.7, 198662.85, 154038.5, 128872.98, 149439.05, 243782.35, 94170.11, 229998.84, 269139.24, 133042.96, 219850.15, 158648.07, 277867.6, 166170.08, 173608.31, 151299.17, 117771.83, 223505.34, 209896.37, 184543.4, 188117.05, 169207.14, 161483.79, 179205.62, 150006.68, 276169.14, 194442.03, 130298.99, 115439.09, 194149.93, 186108.26, 203979.25, 126489.11, 190235.12, 122663.07, 182203.47, 88073.11, 166574.05, 95185.69, 110546.5, 174810.76, 136331.11, 147354.83, 140216.69, 108187.75, 192293.91, 562883.3, 88540.27, 283339.71, 129399.31, 103756.47, 177846.18, 149764.57, 150893.18, 235150.71, 232552.57, 129794.03, 120689.77, 355681.68, 200998.8, 272850.74, 122330.87, 205360.08, 172758.34, 260138.05, 177182.9, 107075.78, 215533.02, 134301.35, 212642.44, 124183.13, 128358.9, 211458.36, 84022.01, 132365.37, 112637.08, 116088.04, 148986.57, 224512.3, 106489.15, 102440.64, 160304.76, 150429.77, 136805.56, 147557.24, 195165.68, 176002.24, 106955.27, 329627.4, 317170.41, 201688.42, 227192.1, 275899.43, 121765.55, 202831.36, 127266.1, 143494.53, 187241.93, 135560.78, 164492.16, 80725.35, 260191.88, 96630.55, 148205.89, 243424.39, 194332.71, 173499.0, 139312.27, 126493.76, 223023.97, 122026.49, 358461.18, 438182.09, 105254.47, 107418.1, 160430.07, 290916.5, 147625.31, 125612.87, 140532.44, 181946.85, 155222.77, 109532.42, 218770.68, 673884.61, 109189.84, 280361.2, 75911.88, 151778.45, 154215.31, 255196.07, 144169.64, 94308.33, 127163.01, 123383.92, 102432.21, 218295.81, 160652.58, 117805.92, 178958.87, 180555.28, 200297.98, 215748.49, 162079.65, 117517.96, 290707.51, 218205.62, 321366.38, 164805.21, 154871.74, 164376.31, 234616.61, 191165.47, 247705.85, 125439.76, 143582.41, 174685.65, 181475.32, 261892.69, 144510.61, 90633.54, 87558.93, 191135.86, 208613.88, 388209.8, 153061.44, 96264.23, 191814.35, 178992.93, 107601.29, 168647.52, 169184.93, 270405.42, 204864.24, 405094.53, 308910.24, 154634.03, 189278.57, 95670.11, 159225.6, 266120.18, 116018.66, 121370.14, 172599.2, 204012.8, 220175.17, 163940.99, 285609.28, 284345.7, 146227.11, 119587.97, 167470.12, 213523.37, 110568.77, 175142.13, 270135.8, 227032.99, 211859.48, 164947.72, 129198.22, 382493.69, 220936.38, 155840.89, 131120.78, 197290.27, 299148.55, 310030.3, 305856.51, 290660.5, 163190.71, 177161.97, 109173.18, 339583.45, 170449.51, 389539.06, 278514.72, 169113.36, 143279.82, 111459.39, 313607.23
  ];

  ebm.printData();

  utils.unitTestAssert(
    'EBM initial prediction',
    () => ebm.getPrediction(),
    expectedPred,
    (t, r) => assert1dCloseTo(t, r, 0.01)
  );

  expectedPred = [
    209781.44, 90352.68, 152809.13, 176288.15, 194828.51, 321204.81, 96731.61, 218825.47, 100035.09, 87802.01, 310555.55, 222935.09, 262606.07, 120491.59, 122574.34, 166457.23, 280486.37, 211382.64, 198443.2, 248678.21, 236848.46, 176446.16, 219673.97, 201902.8, 121528.56, 108597.15, 235343.91, 264476.83, 285984.73, 175548.16, 200310.65, 101698.49, 190424.53, 98327.71, 199287.42, 131409.69, 136908.15, 204755.53, 315486.72, 415359.83, 189773.41, 215127.76, 102434.85, 205968.91, 64565.03, 213782.81, 132558.41, 137649.68, 130718.71, 121938.02, 249030.82, 349675.5, 102969.76, 181948.64, 281392.76, 125600.45, 376822.72, 165286.14, 99373.71, 153067.09, 151296.72, 173002.31, 145048.71, 147981.85, 149087.09, 133160.07, 86351.98, 226233.52, 358243.1, 95699.42, 130735.52, 156275.57, 146818.76, 219778.59, 186270.2, 147031.16, 237537.83, 171915.49, 204828.01, 160970.07, 105402.2, 149728.14, 170165.87, 207696.8, 314838.66, 338868.34, 149643.12, 205883.8, 163512.26, 129426.17, 120764.18, 202478.48, 147468.76, 228797.72, 232941.89, 89807.43, 192169.19, 218619.99, 111480.13, 258372.63, 151768.15, 126071.01, 109805.67, 108122.24, 159592.28, 133527.43, 356461.18, 268935.45, 133885.29, 203459.46, 248910.58, 191068.39, 483706.25, 257242.11, 281267.25, 127810.13, 265317.62, 188759.76, 125447.93, 196251.57, 149919.46, 148399.07, 109824.74, 189801.06, 133132.69, 158329.55, 132273.04, 200476.4, 149267.91, 284437.84, 204471.2, 109515.98, 118560.32, 147656.78, 141863.07, 116337.89, 146807.49, 199998.8, 260543.45, 160205.95, 222353.32, 119910.29, 250582.06, 168020.97, 307385.27, 160266.17, 140910.48, 104022.36, 74068.69, 113009.14, 217566.39, 116899.89, 283668.44, 216685.61, 118807.18, 129954.16, 154810.18, 157826.98, 141449.39, 126850.97, 295425.98, 234589.46, 121664.68, 167895.84, 230300.22, 335726.88, 51872.81, 205311.72, 131201.56, 110301.73, 134191.25, 197785.73, 140106.79, 252101.43, 167525.02, 70057.4, 117097.84, 221623.96, 152158.04, 131638.75, 226331.52, 188965.66, 176927.43, 257017.21, 78720.27, 203554.36, 87570.35, 113522.11, 238545.35, 124733.51, 116333.92, 378030.94, 173758.8, 93684.83, 141905.46, 117053.54, 234732.27, 217156.69, 118119.25, 99646.6, 289972.03, 221094.81, 95290.86, 84921.75, 167480.72, 152109.61, 174884.23, 151439.3, 162118.15, 92497.89, 141850.59, 293552.5, 288119.46, 126698.58, 116829.31, 218069.32, 90982.65, 229555.37, 115243.7, 198662.85, 155447.63, 128872.98, 149439.05, 243782.35, 94170.11, 229998.84, 269139.24, 134452.09, 221259.27, 162106.53, 277867.6, 167579.21, 173608.31, 151299.17, 117771.83, 223505.34, 209896.37, 184543.4, 188117.05, 170616.27, 161483.79, 179205.62, 151415.8, 276169.14, 194442.03, 130298.99, 116984.36, 194149.93, 187517.39, 205388.38, 126489.11, 191644.24, 122663.07, 182203.47, 88073.11, 166574.05, 95185.69, 110546.5, 174810.76, 136331.11, 147354.83, 141625.81, 108187.75, 193703.04, 562883.3, 88540.27, 284748.83, 130808.43, 103756.47, 179255.3, 149764.57, 150893.18, 236559.84, 233961.7, 129794.03, 120689.77, 355681.68, 200998.8, 272850.74, 122330.87, 206769.21, 172758.34, 261547.17, 178592.03, 107075.78, 216942.15, 134301.35, 212642.44, 124183.13, 128358.9, 212867.49, 84022.01, 132365.37, 112637.08, 116088.04, 148986.57, 224512.3, 106489.15, 102440.64, 160304.76, 150429.77, 136805.56, 147557.24, 195165.68, 177411.37, 106955.27, 329627.4, 317170.41, 201688.42, 228601.23, 275899.43, 121765.55, 204240.48, 127266.1, 143494.53, 187241.93, 135560.78, 164492.16, 83091.18, 260191.88, 96630.55, 149615.02, 243424.39, 194332.71, 174908.13, 139312.27, 126493.76, 223023.97, 122026.49, 358461.18, 438182.09, 105254.47, 107418.1, 160430.07, 290916.5, 147625.31, 125612.87, 140532.44, 181946.85, 155222.77, 109532.42, 218770.68, 673884.61, 109189.84, 280361.2, 75911.88, 151778.45, 154215.31, 255196.07, 144169.64, 94308.33, 127163.01, 123383.92, 103977.48, 218295.81, 162061.7, 117805.92, 180368.0, 181964.41, 200297.98, 217157.62, 162079.65, 117517.96, 290707.51, 218205.62, 321366.38, 166214.34, 154871.74, 164376.31, 234616.61, 191165.47, 249114.98, 126848.88, 143582.41, 174685.65, 181475.32, 261892.69, 144510.61, 90633.54, 87558.93, 191135.86, 208613.88, 388209.8, 153061.44, 96264.23, 191814.35, 178992.93, 107601.29, 168647.52, 172752.89, 270405.42, 204864.24, 405094.53, 308910.24, 156043.16, 189278.57, 95670.11, 160634.72, 266120.18, 116018.66, 121370.14, 176057.66, 204012.8, 220175.17, 163940.99, 285609.28, 284345.7, 146227.11, 119587.97, 167470.12, 213523.37, 110568.77, 176551.25, 270135.8, 227032.99, 211859.48, 166356.85, 129198.22, 382493.69, 220936.38, 155840.89, 131120.78, 197290.27, 299148.55, 310030.3, 305856.51, 290660.5, 163190.71, 177161.97, 109173.18, 339583.45, 171858.64, 389539.06, 278514.72, 170522.49, 143279.82, 111459.39, 313607.23
  ];

  utils.unitTestAssert(
    'EBM updating continuous feature',
    () => {
      ebm.updateModel([0, 1, 2, 3, 4], [397.116, 533.2563, 2446.4473, 1353.8102, 2555.9477]);
      return ebm.getPrediction();
    },
    expectedPred,
    (t, r) => assert1dCloseTo(t, r, 0.01)
  );

  ebm = new myModule.EBM(featureData, sampleData, 'LotFrontage', false);

  utils.unitTestAssert(
    'EBM initial continuous metrics RMSE',
    () => ebm.getMetrics().rmse,
    20235.34250608404,
    (t, r) => assert(Math.abs(t - r) < 1e-4)
  );

  utils.unitTestAssert(
    'EBM initial continuous metrics MAE',
    () => ebm.getMetrics().mae,
    14167.224581441791,
    (t, r) => assert(Math.abs(t - r) < 1e-4)
  );

  ebm.destroy();
  ebm = null;

  console.log('\n--- Finished testing EBM Regression ---\n');
};

const testEBMClassifier = async () => {
  const sampleUR = 'https://gist.githubusercontent.com/xiaohk/8ac92378284da1553780ccf650ff10cc/raw/1d34ee1d764154bcf860426544f7bbae48257cff/iow-house-sample-binary.json';
  const featureURL = 'https://gist.githubusercontent.com/xiaohk/ffd09a565a33705239b54e84a364c7d3/raw/099558fbb04ecd63c949d5ab53c680532bf79b3a/iow-house-ebm-binary.json';

  let result = await fetch(sampleUR);
  let sampleData = await result.json();

  result = await fetch(featureURL);
  let featureData = await result.json();

  let ebm = new myModule.EBM(featureData, sampleData, 'LotFrontage', true);

  let expectedPred = [
    0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1,
    0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0,
    0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1,
    1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1,
    1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
    1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1,
    0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0,
    0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1,
    1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,
    1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0,
    1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0,
    1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0,
    0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1,
    1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0,
    0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1,
    0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0,
    0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1
  ];

  utils.unitTestAssert(
    'EBM initial prediction',
    () => ebm.getPrediction(),
    expectedPred,
    (t, r) => assert1dCloseTo(t, r, 0.01)
  );

  expectedPred = [
    5.900e-03, 4.384e-01, 2.000e-04, 9.973e-01, 3.000e-04, 1.233e-01,
    9.453e-01, 9.940e-01, 9.370e-01, 9.988e-01, 1.560e-02, 2.100e-03,
    9.977e-01, 6.473e-01, 1.600e-03, 2.300e-03, 9.974e-01, 9.637e-01,
    9.015e-01, 2.000e-04, 9.963e-01, 9.391e-01, 2.820e-02, 1.300e-03,
    9.992e-01, 8.000e-04, 8.090e-01, 9.980e-01, 9.976e-01, 9.962e-01,
    2.800e-03, 9.947e-01, 4.751e-01, 9.207e-01, 9.997e-01, 9.712e-01,
    8.099e-01, 9.979e-01, 9.600e-03, 6.350e-02, 1.300e-03, 9.999e-01,
    4.900e-03, 2.000e-03, 1.330e-01, 1.431e-01, 9.851e-01, 9.872e-01,
    8.950e-02, 3.770e-02, 1.250e-02, 3.300e-02, 3.260e-02, 9.748e-01,
    6.750e-02, 9.906e-01, 3.934e-01, 9.989e-01, 2.550e-02, 4.000e-04,
    9.165e-01, 9.725e-01, 2.600e-03, 6.900e-03, 9.995e-01, 9.829e-01,
    7.559e-01, 9.696e-01, 1.144e-01, 1.550e-02, 9.754e-01, 2.080e-02,
    9.813e-01, 2.000e-04, 3.374e-01, 9.917e-01, 9.125e-01, 7.433e-01,
    3.650e-02, 9.100e-03, 4.800e-03, 1.400e-03, 9.995e-01, 8.970e-02,
    9.990e-01, 9.643e-01, 9.825e-01, 9.487e-01, 9.948e-01, 1.000e-02,
    9.976e-01, 9.989e-01, 9.287e-01, 9.063e-01, 9.178e-01, 1.000e-04,
    6.830e-01, 9.351e-01, 2.200e-03, 4.620e-02, 1.819e-01, 9.952e-01,
    3.173e-01, 9.911e-01, 3.229e-01, 9.995e-01, 9.912e-01, 4.290e-02,
    9.979e-01, 6.511e-01, 6.699e-01, 9.866e-01, 9.930e-02, 9.992e-01,
    1.204e-01, 9.233e-01, 1.100e-03, 1.330e-02, 1.000e-02, 1.004e-01,
    2.850e-02, 6.000e-04, 9.843e-01, 4.900e-03, 9.757e-01, 9.976e-01,
    5.200e-03, 9.964e-01, 1.510e-01, 9.993e-01, 2.321e-01, 9.837e-01,
    2.700e-03, 1.400e-03, 2.000e-04, 9.954e-01, 9.936e-01, 6.000e-04,
    2.161e-01, 9.956e-01, 6.800e-03, 1.945e-01, 7.000e-04, 9.985e-01,
    2.223e-01, 9.949e-01, 1.000e-04, 5.000e-04, 5.350e-02, 9.964e-01,
    9.972e-01, 9.770e-01, 1.290e-02, 3.640e-02, 2.010e-02, 9.979e-01,
    9.350e-02, 2.691e-01, 2.600e-03, 9.942e-01, 9.972e-01, 4.800e-03,
    1.100e-03, 1.960e-02, 9.952e-01, 9.877e-01, 9.984e-01, 2.200e-03,
    8.391e-01, 9.995e-01, 1.061e-01, 9.856e-01, 2.280e-02, 5.350e-02,
    1.141e-01, 1.800e-03, 1.900e-03, 1.710e-02, 9.833e-01, 1.000e-04,
    4.110e-02, 9.976e-01, 8.341e-01, 9.999e-01, 9.923e-01, 3.940e-02,
    9.874e-01, 1.001e-01, 2.709e-01, 9.723e-01, 3.600e-03, 7.300e-03,
    4.776e-01, 9.500e-02, 9.997e-01, 8.550e-02, 9.682e-01, 9.924e-01,
    9.969e-01, 1.600e-03, 5.931e-01, 9.840e-01, 9.971e-01, 9.979e-01,
    3.400e-03, 3.000e-04, 1.930e-01, 9.981e-01, 9.990e-01, 1.100e-03,
    4.360e-02, 1.900e-03, 9.743e-01, 9.989e-01, 6.310e-01, 1.413e-01,
    2.800e-03, 8.000e-04, 9.000e-04, 9.804e-01, 9.992e-01, 1.292e-01,
    4.690e-02, 3.230e-02, 9.955e-01, 9.674e-01, 5.792e-01, 4.021e-01,
    9.560e-01, 9.933e-01, 9.946e-01, 9.500e-03, 4.980e-02, 2.290e-02,
    2.300e-03, 9.999e-01, 1.700e-02, 8.465e-01, 9.882e-01, 9.805e-01,
    9.999e-01, 1.580e-02, 9.998e-01, 2.850e-02, 9.985e-01, 8.000e-04,
    1.777e-01, 9.976e-01, 5.000e-04, 2.520e-02, 9.886e-01, 1.200e-03,
    9.631e-01, 9.757e-01, 1.100e-03, 9.957e-01, 7.700e-03, 7.828e-01,
    7.528e-01, 9.997e-01, 2.290e-02, 4.748e-01, 9.996e-01, 2.687e-01,
    9.556e-01, 4.700e-03, 8.879e-01, 4.000e-03, 3.296e-01, 9.939e-01,
    7.988e-01, 8.000e-04, 9.797e-01, 8.279e-01, 6.364e-01, 8.791e-01,
    9.834e-01, 9.970e-01, 9.986e-01, 3.700e-03, 1.158e-01, 3.600e-03,
    1.162e-01, 3.600e-03, 9.901e-01, 3.127e-01, 9.690e-01, 9.977e-01,
    9.994e-01, 9.166e-01, 7.600e-02, 3.000e-04, 1.000e+00, 9.981e-01,
    9.978e-01, 2.800e-03, 7.597e-01, 9.947e-01, 9.575e-01, 4.100e-03,
    1.010e-02, 9.885e-01, 8.941e-01, 9.707e-01, 9.997e-01, 5.800e-03,
    9.951e-01, 5.000e-04, 4.800e-03, 9.848e-01, 9.945e-01, 9.802e-01,
    1.920e-02, 3.870e-01, 8.110e-02, 9.848e-01, 7.158e-01, 2.000e-04,
    1.000e-04, 7.485e-01, 9.997e-01, 1.000e-04, 8.000e-04, 7.360e-02,
    9.986e-01, 1.763e-01, 7.000e-03, 2.282e-01, 9.000e-04, 2.700e-03,
    1.280e-02, 4.413e-01, 9.998e-01, 1.220e-02, 9.909e-01, 6.620e-02,
    9.804e-01, 7.779e-01, 8.391e-01, 9.638e-01, 9.145e-01, 9.989e-01,
    1.910e-02, 4.200e-03, 9.914e-01, 9.984e-01, 2.520e-02, 2.500e-03,
    9.564e-01, 9.903e-01, 9.991e-01, 8.567e-01, 9.922e-01, 9.992e-01,
    9.991e-01, 2.800e-03, 9.971e-01, 9.720e-01, 2.030e-02, 1.744e-01,
    9.958e-01, 2.370e-02, 9.200e-03, 9.995e-01, 9.903e-01, 4.800e-03,
    1.110e-02, 9.799e-01, 1.000e-04, 9.860e-01, 9.993e-01, 1.030e-02,
    2.790e-02, 2.410e-02, 3.572e-01, 9.757e-01, 9.989e-01, 8.900e-03,
    9.862e-01, 6.300e-03, 9.640e-01, 9.783e-01, 2.200e-03, 8.737e-01,
    9.990e-01, 9.923e-01, 9.993e-01, 9.500e-03, 9.982e-01, 9.974e-01,
    9.976e-01, 9.973e-01, 9.010e-02, 5.158e-01, 2.480e-02, 9.216e-01,
    8.900e-03, 9.098e-01, 5.705e-01, 2.234e-01, 7.450e-01, 4.600e-03,
    1.500e-02, 1.650e-02, 1.000e-03, 6.200e-03, 1.300e-03, 5.010e-01,
    9.943e-01, 5.300e-03, 9.923e-01, 9.711e-01, 9.810e-01, 9.778e-01,
    9.085e-01, 2.300e-03, 9.904e-01, 7.200e-03, 4.400e-03, 2.188e-01,
    1.410e-02, 9.737e-01, 1.090e-02, 9.895e-01, 9.982e-01, 1.200e-03,
    9.077e-01, 9.940e-01, 9.988e-01, 9.753e-01, 2.000e-03, 3.200e-03,
    1.000e-04, 2.500e-03, 9.997e-01, 3.653e-01, 1.040e-02, 9.726e-01
  ];

  utils.unitTestAssert(
    'EBM initial probabilities',
    () => ebm.getProb(),
    expectedPred,
    (t, r) => assert1dCloseTo(t, r, 1e-3)
  );

  utils.unitTestAssert(
    'EBM initial summary statistics',
    () => {
      let metrics = ebm.getMetrics();
      return [metrics.accuracy, metrics.rocAuc, metrics.averagePrecision];
    },
    [0.9680365296803652, 0.9897173845030764, 0.9847073740939531],
    (t, r) => assert1dCloseTo(t, r, 1e-6)
  );

  utils.unitTestAssert(
    'EBM confusion matrix',
    () => {
      let metrics = ebm.getMetrics();
      return metrics.confusionMatrix;
    },
    [207, 8, 6, 217],
    (t, r) => assert1dCloseTo(t, r, 1e-6)
  );

  expectedPred = [
    [0.0, 0.0],
    [0.004484304932735426, 0.0],
    [0.19282511210762332, 0.0],
    [0.19282511210762332, 0.004651162790697674],
    [0.3452914798206278, 0.004651162790697674],
    [0.3452914798206278, 0.009302325581395349],
    [0.7443946188340808, 0.009302325581395349],
    [0.7443946188340808, 0.013953488372093023],
    [0.8834080717488789, 0.013953488372093023],
    [0.8834080717488789, 0.018604651162790697],
    [0.9372197309417041, 0.018604651162790697],
    [0.9372197309417041, 0.027906976744186046],
    [0.9641255605381166, 0.027906976744186046],
    [0.9641255605381166, 0.03255813953488372],
    [0.968609865470852, 0.03255813953488372],
    [0.968609865470852, 0.037209302325581395],
    [0.9775784753363229, 0.037209302325581395],
    [0.9775784753363229, 0.046511627906976744],
    [0.9820627802690582, 0.046511627906976744],
    [0.9820627802690582, 0.05116279069767442],
    [0.9865470852017937, 0.05116279069767442],
    [0.9865470852017937, 0.07441860465116279],
    [0.9910313901345291, 0.07441860465116279],
    [0.9910313901345291, 0.07906976744186046],
    [0.9955156950672646, 0.07906976744186046],
    [0.9955156950672646, 0.12558139534883722],
    [1.0, 0.12558139534883722],
    [1, 0.6790697674418604],
    [1, 0.6883720930232559],
    [1.0, 1.0]
  ];

  utils.unitTestAssert(
    'EBM ROC curve',
    () => {
      let metrics = ebm.getMetrics();
      return metrics.rocCurve;
    },
    expectedPred,
    (t, r) => assert2dCloseTo(t, r, 1e-6)
  );

  expectedPred = [
    [1.0, 0.0],
    [1.0, 0.0045],
    [1.0, 0.009],
    [1.0, 0.0135],
    [1.0, 0.0179],
    [1.0, 0.0224],
    [1.0, 0.0269],
    [1.0, 0.0314],
    [1.0, 0.0359],
    [1.0, 0.0404],
    [1.0, 0.0448],
    [1.0, 0.0493],
    [1.0, 0.0538],
    [1.0, 0.0583],
    [1.0, 0.0628],
    [1.0, 0.0673],
    [1.0, 0.0717],
    [1.0, 0.0762],
    [1.0, 0.0807],
    [1.0, 0.0852],
    [1.0, 0.0897],
    [1.0, 0.0942],
    [1.0, 0.0987],
    [1.0, 0.1031],
    [1.0, 0.1076],
    [1.0, 0.1121],
    [1.0, 0.1166],
    [1.0, 0.1211],
    [1.0, 0.1256],
    [1.0, 0.13],
    [1.0, 0.1345],
    [1.0, 0.139],
    [1.0, 0.1435],
    [1.0, 0.148],
    [1.0, 0.1525],
    [1.0, 0.157],
    [1.0, 0.1614],
    [1.0, 0.1659],
    [1.0, 0.1704],
    [1.0, 0.1749],
    [1.0, 0.1794],
    [1.0, 0.1839],
    [1.0, 0.1883],
    [1.0, 0.1928],
    [0.9773, 0.1928],
    [0.9778, 0.1973],
    [0.9783, 0.2018],
    [0.9787, 0.2063],
    [0.9792, 0.2108],
    [0.9796, 0.2152],
    [0.98, 0.2197],
    [0.9804, 0.2242],
    [0.9808, 0.2287],
    [0.9811, 0.2332],
    [0.9815, 0.2377],
    [0.9818, 0.2422],
    [0.9821, 0.2466],
    [0.9825, 0.2511],
    [0.9828, 0.2556],
    [0.9831, 0.2601],
    [0.9833, 0.2646],
    [0.9836, 0.2691],
    [0.9839, 0.2735],
    [0.9841, 0.278],
    [0.9844, 0.2825],
    [0.9846, 0.287],
    [0.9848, 0.2915],
    [0.9851, 0.296],
    [0.9853, 0.3004],
    [0.9855, 0.3049],
    [0.9857, 0.3094],
    [0.9859, 0.3139],
    [0.9861, 0.3184],
    [0.9863, 0.3229],
    [0.9865, 0.3274],
    [0.9867, 0.3318],
    [0.9868, 0.3363],
    [0.987, 0.3408],
    [0.9872, 0.3453],
    [0.9747, 0.3453],
    [0.975, 0.3498],
    [0.9753, 0.3543],
    [0.9756, 0.3587],
    [0.9759, 0.3632],
    [0.9762, 0.3677],
    [0.9765, 0.3722],
    [0.9767, 0.3767],
    [0.977, 0.3812],
    [0.9773, 0.3857],
    [0.9775, 0.3901],
    [0.9778, 0.3946],
    [0.978, 0.3991],
    [0.9783, 0.4036],
    [0.9785, 0.4081],
    [0.9787, 0.4126],
    [0.9789, 0.417],
    [0.9792, 0.4215],
    [0.9794, 0.426],
    [0.9796, 0.4305],
    [0.9798, 0.435],
    [0.98, 0.4395],
    [0.9802, 0.4439],
    [0.9804, 0.4484],
    [0.9806, 0.4529],
    [0.9808, 0.4574],
    [0.981, 0.4619],
    [0.9811, 0.4664],
    [0.9813, 0.4709],
    [0.9815, 0.4753],
    [0.9817, 0.4798],
    [0.9818, 0.4843],
    [0.982, 0.4888],
    [0.9821, 0.4933],
    [0.9823, 0.4978],
    [0.9825, 0.5022],
    [0.9826, 0.5067],
    [0.9828, 0.5112],
    [0.9829, 0.5157],
    [0.9831, 0.5202],
    [0.9832, 0.5247],
    [0.9833, 0.5291],
    [0.9835, 0.5336],
    [0.9836, 0.5381],
    [0.9837, 0.5426],
    [0.9839, 0.5471],
    [0.984, 0.5516],
    [0.9841, 0.5561],
    [0.9843, 0.5605],
    [0.9844, 0.565],
    [0.9845, 0.5695],
    [0.9846, 0.574],
    [0.9847, 0.5785],
    [0.9848, 0.583],
    [0.985, 0.5874],
    [0.9851, 0.5919],
    [0.9852, 0.5964],
    [0.9853, 0.6009],
    [0.9854, 0.6054],
    [0.9855, 0.6099],
    [0.9856, 0.6143],
    [0.9857, 0.6188],
    [0.9858, 0.6233],
    [0.9859, 0.6278],
    [0.986, 0.6323],
    [0.9861, 0.6368],
    [0.9862, 0.6413],
    [0.9863, 0.6457],
    [0.9864, 0.6502],
    [0.9865, 0.6547],
    [0.9866, 0.6592],
    [0.9867, 0.6637],
    [0.9868, 0.6682],
    [0.9868, 0.6726],
    [0.9869, 0.6771],
    [0.987, 0.6816],
    [0.9871, 0.6861],
    [0.9872, 0.6906],
    [0.9873, 0.6951],
    [0.9873, 0.6996],
    [0.9874, 0.704],
    [0.9875, 0.7085],
    [0.9876, 0.713],
    [0.9877, 0.7175],
    [0.9877, 0.722],
    [0.9878, 0.7265],
    [0.9879, 0.7309],
    [0.988, 0.7354],
    [0.988, 0.7399],
    [0.9881, 0.7444],
    [0.9822, 0.7444],
    [0.9824, 0.7489],
    [0.9825, 0.7534],
    [0.9826, 0.7578],
    [0.9827, 0.7623],
    [0.9828, 0.7668],
    [0.9829, 0.7713],
    [0.983, 0.7758],
    [0.9831, 0.7803],
    [0.9831, 0.7848],
    [0.9832, 0.7892],
    [0.9833, 0.7937],
    [0.9834, 0.7982],
    [0.9835, 0.8027],
    [0.9836, 0.8072],
    [0.9837, 0.8117],
    [0.9838, 0.8161],
    [0.9839, 0.8206],
    [0.984, 0.8251],
    [0.984, 0.8296],
    [0.9841, 0.8341],
    [0.9842, 0.8386],
    [0.9843, 0.843],
    [0.9844, 0.8475],
    [0.9845, 0.852],
    [0.9845, 0.8565],
    [0.9846, 0.861],
    [0.9847, 0.8655],
    [0.9848, 0.87],
    [0.9848, 0.8744],
    [0.9849, 0.8789],
    [0.985, 0.8834],
    [0.9801, 0.8834],
    [0.9802, 0.8879],
    [0.9803, 0.8924],
    [0.9804, 0.8969],
    [0.9805, 0.9013],
    [0.9806, 0.9058],
    [0.9807, 0.9103],
    [0.9808, 0.9148],
    [0.9809, 0.9193],
    [0.981, 0.9238],
    [0.981, 0.9283],
    [0.9811, 0.9327],
    [0.9812, 0.9372],
    [0.9766, 0.9372],
    [0.9721, 0.9372],
    [0.9722, 0.9417],
    [0.9724, 0.9462],
    [0.9725, 0.9507],
    [0.9726, 0.9552],
    [0.9727, 0.9596],
    [0.9729, 0.9641],
    [0.9685, 0.9641],
    [0.9686, 0.9686],
    [0.9643, 0.9686],
    [0.9644, 0.9731],
    [0.9646, 0.9776],
    [0.9604, 0.9776],
    [0.9561, 0.9776],
    [0.9563, 0.9821],
    [0.9522, 0.9821],
    [0.9524, 0.9865],
    [0.9483, 0.9865],
    [0.9442, 0.9865],
    [0.9402, 0.9865],
    [0.9362, 0.9865],
    [0.9322, 0.9865],
    [0.9325, 0.991],
    [0.9286, 0.991],
    [0.9289, 0.9955],
    [0.925, 0.9955],
    [0.9212, 0.9955],
    [0.9174, 0.9955],
    [0.9136, 0.9955],
    [0.9098, 0.9955],
    [0.9061, 0.9955],
    [0.9024, 0.9955],
    [0.8988, 0.9955],
    [0.8952, 0.9955],
    [0.8916, 0.9955],
    [0.892, 1.0]
  ];

  utils.unitTestAssert(
    'EBM PR curve',
    () => {
      let metrics = ebm.getMetrics();
      return metrics.prCurve;
    },
    expectedPred,
    (t, r) => assert2dCloseTo(t, r, 1e-2)
  );

  expectedPred = [
    0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1,
    0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0,
    0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1,
    1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1,
    1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
    1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1,
    0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0,
    0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0,
    0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1,
    1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1,
    1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,
    1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0,
    1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1,
    1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0,
    0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1,
    1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0,
    1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1,
    0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0,
    0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1
  ];

  utils.unitTestAssert(
    'EBM updating continuous feature',
    () => {
      ebm.updateModel([0, 1, 2, 3, 4], [3.97, 5.33, 2.44, 0.13, 2.55]);
      return ebm.getPrediction();
    },
    expectedPred,
    (t, r) => assert1dCloseTo(t, r, 0.01)
  );

  expectedPred = [5.92535515e-03, 9.16926312e-01, 1.66269788e-04, 9.97839935e-01,
    1.63646194e-02, 1.23294762e-01, 9.45263529e-01, 9.93979542e-01,
    9.37010532e-01, 9.98762773e-01, 1.55501078e-02, 2.07111968e-03,
    9.97690728e-01, 6.47282402e-01, 1.59010352e-03, 2.89455609e-02,
    9.99949509e-01, 9.63687129e-01, 9.01486684e-01, 4.42010329e-02,
    9.96280498e-01, 9.39140612e-01, 2.81560751e-02, 1.25050665e-03,
    9.99238111e-01, 8.49756770e-04, 9.95454279e-01, 9.97966701e-01,
    9.97590071e-01, 9.96189479e-01, 1.24968022e-01, 9.99896596e-01,
    9.27530067e-01, 9.20731345e-01, 9.99711806e-01, 9.99427201e-01,
    8.09914880e-01, 9.97933543e-01, 9.64511112e-03, 6.34609561e-02,
    1.26764717e-03, 9.99946618e-01, 4.92059158e-03, 2.00294739e-03,
    1.32995604e-01, 1.43055282e-01, 9.85095770e-01, 9.87155895e-01,
    8.95263589e-02, 3.76991800e-02, 1.25181021e-02, 6.38204946e-01,
    3.25633790e-02, 9.74800136e-01, 6.74828715e-02, 9.90550626e-01,
    3.93352702e-01, 9.98886477e-01, 2.55320920e-02, 3.55058153e-04,
    9.98239782e-01, 9.72462033e-01, 2.63844873e-03, 6.92347526e-03,
    9.99460253e-01, 9.99662640e-01, 7.55896716e-01, 9.69614471e-01,
    8.69706524e-01, 1.54622731e-02, 9.99511619e-01, 2.07700191e-02,
    9.99630970e-01, 1.89405383e-04, 3.37422626e-01, 9.91681324e-01,
    9.12490254e-01, 7.43290695e-01, 3.65047570e-02, 9.07673179e-03,
    5.71026953e-02, 1.42194374e-03, 9.99459761e-01, 8.97081032e-02,
    9.99029739e-01, 9.99283860e-01, 9.82506026e-01, 9.98954946e-01,
    9.94802872e-01, 9.99827171e-03, 9.97565750e-01, 9.98935998e-01,
    9.28736522e-01, 9.06345040e-01, 9.98271312e-01, 5.97610409e-05,
    6.83007849e-01, 9.35147078e-01, 2.16460513e-03, 4.61802740e-02,
    1.81941690e-01, 9.99906106e-01, 3.17250979e-01, 9.91074132e-01,
    3.22945308e-01, 9.99532228e-01, 9.91233379e-01, 4.29040840e-02,
    9.97912832e-01, 6.51101179e-01, 6.69867737e-01, 9.86635552e-01,
    8.50694348e-01, 9.99985022e-01, 1.20427122e-01, 9.23311873e-01,
    1.07862860e-03, 1.33473357e-02, 9.97518996e-03, 1.00360314e-01,
    6.02177271e-01, 1.12952675e-01, 9.84338419e-01, 4.93369041e-03,
    9.75704217e-01, 9.99954244e-01, 5.15277562e-03, 9.96441798e-01,
    1.50976099e-01, 9.99258413e-01, 2.32063426e-01, 9.83666083e-01,
    2.68605559e-03, 6.80449841e-02, 1.94094379e-04, 9.95399266e-01,
    9.93551919e-01, 1.18776717e-01, 9.34433686e-01, 9.99914379e-01,
    6.83062574e-03, 1.94534173e-01, 6.53862031e-04, 9.98506481e-01,
    9.36611462e-01, 9.94867733e-01, 1.33511390e-02, 5.29871886e-04,
    5.34956274e-02, 9.99929243e-01, 9.97209050e-01, 9.76950915e-01,
    1.29033794e-02, 3.63609993e-02, 2.00719381e-02, 9.97930556e-01,
    9.34844451e-02, 2.69072402e-01, 2.60496435e-03, 9.94202118e-01,
    9.99945038e-01, 4.84141562e-03, 1.12792145e-03, 1.95622774e-02,
    9.95232502e-01, 9.87718257e-01, 9.98412483e-01, 2.16764491e-03,
    8.39122215e-01, 9.99989873e-01, 6.00553965e-01, 9.99716846e-01,
    2.27804093e-02, 5.35232472e-02, 8.69388824e-01, 1.83669314e-03,
    1.88012905e-03, 4.72865209e-01, 9.83347103e-01, 1.33262920e-04,
    4.10856981e-02, 9.99952533e-01, 8.34075327e-01, 9.99881327e-01,
    9.92320991e-01, 3.94361397e-02, 9.99752934e-01, 8.51855314e-01,
    2.70921079e-01, 9.99448522e-01, 3.62638092e-03, 7.29781686e-03,
    4.77621328e-01, 9.50340055e-02, 9.99650601e-01, 5.42098305e-01,
    9.68156110e-01, 9.92363199e-01, 9.96949154e-01, 1.61157581e-03,
    5.93087311e-01, 9.83968385e-01, 9.99943920e-01, 9.97946029e-01,
    3.40596760e-03, 3.07722750e-04, 1.92979575e-01, 9.98092022e-01,
    9.98991401e-01, 1.05097511e-03, 7.02068804e-01, 1.93728738e-03,
    9.74310393e-01, 9.98910855e-01, 9.88815024e-01, 8.94809890e-01,
    2.75607342e-03, 1.48091318e-01, 4.56908941e-02, 9.80385646e-01,
    9.99215339e-01, 1.29229175e-01, 4.68502863e-02, 6.33135826e-01,
    9.95526855e-01, 9.67446555e-01, 5.79220558e-01, 4.02088697e-01,
    9.55991897e-01, 9.93316472e-01, 9.94550086e-01, 9.46465789e-03,
    4.98138231e-02, 2.29489044e-02, 2.30300433e-03, 9.99909118e-01,
    1.69635813e-02, 9.96504357e-01, 9.88225568e-01, 9.99614659e-01,
    9.99919743e-01, 1.58275899e-02, 9.99798023e-01, 2.84581692e-02,
    9.98548762e-01, 3.80538631e-02, 1.77730117e-01, 9.97558558e-01,
    4.91855203e-04, 5.72292179e-01, 9.88572057e-01, 6.04436415e-02,
    9.63094615e-01, 9.75679062e-01, 1.13861115e-03, 9.95713220e-01,
    2.87604554e-01, 9.94661758e-01, 7.52793403e-01, 9.99708428e-01,
    2.29123595e-02, 4.74759465e-01, 9.99644530e-01, 2.68720635e-01,
    9.55578397e-01, 4.65564784e-03, 8.87942700e-01, 3.95397899e-03,
    3.29564999e-01, 9.93863230e-01, 7.98835464e-01, 8.41170224e-04,
    9.79682126e-01, 8.27948638e-01, 6.36407604e-01, 9.97345951e-01,
    9.83442522e-01, 9.97048154e-01, 9.98631340e-01, 3.71788610e-03,
    1.15779325e-01, 3.55998827e-03, 1.16242247e-01, 3.56063925e-03,
    9.90110238e-01, 9.59212910e-01, 9.69033590e-01, 9.97681771e-01,
    9.99987452e-01, 9.16630894e-01, 8.09516753e-01, 3.25153463e-04,
    9.99960577e-01, 9.98104441e-01, 9.97841484e-01, 2.75170810e-03,
    7.59679468e-01, 9.94691252e-01, 9.57475403e-01, 4.13620700e-03,
    1.00979562e-02, 9.88502353e-01, 9.97713804e-01, 9.70673562e-01,
    9.99721353e-01, 5.83227766e-03, 9.95133915e-01, 5.37149986e-04,
    4.78530601e-03, 9.84802611e-01, 9.94509722e-01, 9.80247934e-01,
    1.92251852e-02, 3.86962609e-01, 8.10699102e-02, 9.84798504e-01,
    7.15767944e-01, 1.82981095e-04, 2.83153198e-02, 9.93542783e-01,
    9.99658893e-01, 1.21732624e-04, 7.60833464e-04, 7.35805226e-02,
    9.98648751e-01, 1.76325478e-01, 6.99601529e-03, 2.28184061e-01,
    9.23631374e-04, 2.72282578e-03, 1.27632174e-02, 9.76092881e-01,
    9.99841939e-01, 1.21812519e-02, 9.99822347e-01, 6.61574284e-02,
    9.80413969e-01, 7.77944029e-01, 9.96305014e-01, 9.63780196e-01,
    9.14469821e-01, 9.98879725e-01, 1.91465329e-02, 1.77828416e-01,
    9.99832079e-01, 9.98369037e-01, 2.51661672e-02, 2.48392577e-03,
    9.56444678e-01, 9.90252280e-01, 9.99131956e-01, 8.82582630e-01,
    9.92245523e-01, 9.99218816e-01, 9.99080633e-01, 2.75901563e-03,
    9.97051987e-01, 9.72017365e-01, 2.02614706e-02, 1.74355147e-01,
    9.95803068e-01, 2.36636851e-02, 9.16759312e-03, 9.99504716e-01,
    9.99811303e-01, 1.99699932e-01, 1.10996060e-02, 9.79934493e-01,
    3.00830387e-02, 9.99724919e-01, 9.99324541e-01, 1.02502935e-02,
    2.78675960e-02, 2.41181463e-02, 9.66361857e-01, 9.99519265e-01,
    9.98899174e-01, 8.92896590e-03, 9.86193753e-01, 6.27132455e-03,
    9.63988425e-01, 9.78335840e-01, 2.17750847e-03, 8.73702547e-01,
    9.99009621e-01, 9.92277581e-01, 9.99253318e-01, 9.45327372e-03,
    9.98230226e-01, 9.97377673e-01, 9.97627283e-01, 9.97273386e-01,
    9.01338896e-02, 9.82160932e-01, 2.47772831e-02, 9.21634796e-01,
    8.90377880e-03, 9.09818352e-01, 9.85645906e-01, 9.36972177e-01,
    7.44997221e-01, 4.62322983e-03, 1.50230250e-02, 1.65277987e-02,
    4.68548881e-02, 6.24800065e-03, 6.25425424e-02, 9.81098219e-01,
    9.99889071e-01, 5.30480801e-03, 9.92282226e-01, 9.71090692e-01,
    9.99626018e-01, 9.99560237e-01, 9.08506858e-01, 1.05574580e-01,
    9.99812817e-01, 2.72338076e-01, 1.84533720e-01, 2.18785527e-01,
    1.40863097e-02, 9.73714814e-01, 1.09320431e-02, 9.89461774e-01,
    9.98214293e-01, 1.19690014e-03, 9.07732259e-01, 9.93984572e-01,
    9.98835738e-01, 9.75280933e-01, 2.02733040e-03, 3.23405727e-03,
    1.43936653e-04, 2.52125815e-03, 9.99729703e-01, 8.79357639e-01,
    1.03863983e-02, 9.72560639e-01];

  utils.unitTestAssert(
    'EBM updating continuous feature => predicted probs',
    () => {
      return ebm.getProb();
    },
    expectedPred,
    (t, r) => assert1dCloseTo(t, r, 1e-2)
  );

  utils.unitTestAssert(
    'EBM updated statistics',
    () => {
      let metrics = ebm.getMetrics();
      return [metrics.accuracy, metrics.rocAuc, metrics.averagePrecision];
    },
    [0.9223744292237442, 0.9811867765147564, 0.979173689640954],
    (t, r) => assert1dCloseTo(t, r, 0.01)
  );

  console.log('\n--- Finished testing EBM Classification ---\n');

};

// testEBM();
testEBMClassifier();


